---
title: "UMAP"
description: "Reviewing the basics of UMAP"
author: 
  - name: Holly Hall
    url: https://mdrnao.github.io
date: 08-06-2024
categories: [ basics, UMAP]
bibliography: references.bib
image: image.jpeg
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    code-summary: "Show the code"
execute: 
  cache: true
---

## Overview

UMAP (Uniform Manifold Approximation and Projection) is a non-linear dimensionality reduction technique that excels at reducing high-dimensional data into a low-dimensional representation. Unlike PCA (Principal Component Analysis), which is linear and only effective when the first few components capture a significant portion of the data's variation, UMAP can handle more complex, non-linear relationships within the data.

UMAP operates by calculating similarity scores between pairs of data points in the original high-dimensional space. These similarity scores are determined based on the number of nearest neighbors each point has, capturing the local topology of the data. UMAP uses these scores to construct a fuzzy topological representation, which it then optimizes to preserve the structure of the data when it is projected into a lower-dimensional space.

To create the low-dimensional representation, UMAP initializes the process with a spectral embedding, a graph-based approximation, which serves as a starting point. It then iteratively adjusts the positions of the points, guided by low-dimensional similarity scores derived from a t-distribution curve, allowing UMAP to effectively maintain the local relationships of the data points.

UMAP shares similarities with t-SNE (t-distributed Stochastic Neighbor Embedding), another popular dimensionality reduction technique. However, while t-SNE starts with a random initial representation and adjusts every point slightly during each iteration, UMAP's initial step is more structured, using a spectral embedding. UMAP also has the flexibility to move individual points or subsets of points with each iteration, making it particularly efficient for handling large datasets.

One of UMAP's strengths is its ability to balance local and global structure in the data. By adjusting the number of nearest neighbors (NN) used in the calculation, UMAP can either emphasize the local structure, revealing finer details within clusters with low NN, or capture broader trends across the dataset with higher NN, providing a more global perspective.

The proper description of how UMAP works can be found in the [documentation](https://umap-learn.readthedocs.io/en/latest/how_umap_works.html), or a handy [YouTube](https://www.youtube.com/watch?v=nq6iPZVUxZU&t=1398s) video.

A really good explanation of the cost functions and gradient descent differences between the various dimensional reduction tools can be found [here](https://jlmelville.github.io/smallvis/theory.html). And [this paper](https://www.jmlr.org/papers/volume22/20-1061/20-1061.pdf) gives an indepth comparison of the underlying maths, which I need to read properly.

## Practical examples!

Download the popular mnist dataset, and make a basic umap plot with standard parameters.

```{r}
mnist <- snedata::download_mnist("https://ossci-datasets.s3.amazonaws.com/mnist/")

mnist <- list(
  data = mnist[,1:784],
  label = mnist$Label
)

suppressMessages({library(rnndescent); require(uwot); require(ggplot2); require(cowplot); require(dplyr) })

set.seed(42)
mnist_umap2 <- umap2(mnist$data)
```

```{r}
data.frame(
  mnist_umap2,
  label = mnist$label
) %>% 
  ggplot(aes(X1, X2, colour = label)) +
  geom_point(size=0.5, alpha = 0.4) +
  theme_classic()+
  guides(color = guide_legend(override.aes = list(size = 5, alpha = 1))) +
  panel_border(colour = "black")

```

### number of NN

Since UMAP uses the number of neighbours to a given data point to determine its position, the parameter n_neighbours is very important. I've not seen a principled way of determining the optimal number of neighbours yet, so I do it primarily through trial and error. Too few neighbours and you can lose the global structure, too many and you might lose some local structure.

We'll see how choosing 2, 5, 20, and 200 neighbours changes the UMAP representation:

```{r}

draw_umap <- function(nn = 15) {
  umap.res = umap2(mnist$data, n_neighbors =nn )
  data.frame(
    umap.res,
    label = mnist$label
  ) %>% 
    ggplot(aes(X1, X2, colour = label)) +
    geom_point(size=0.5, alpha = 0.4) +
    theme_classic()+
    guides(color = guide_legend(override.aes = list(size = 5, alpha = 1))) +
    panel_border(colour = "black") +
    labs(subtitle = paste0("NN = ", i)) +
    theme(axis.title = element_blank(),
          axis.ticks = element_blank(),
          axis.text = element_blank())
}

umap.nn <- list()
for(i in c(2,5,20,200)){
  name = as.character(i)
  umap.nn[[name]] <- draw_umap(i)
  
}

plot_grid(plotlist = umap.nn)

```

What is clear is that only 2 neighbours have no clustering structure, and all the digits form one large cloud. 5 neighbours have more structure, but there seems to be more mixture of the clusters than 20 neighbours. At 200 it looks like we're starting to lose definition again.

***TBC***
